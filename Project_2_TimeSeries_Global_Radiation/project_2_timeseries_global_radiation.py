# -*- coding: utf-8 -*-
"""Project_2_TimeSeries_Global_Radiation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YfgRP7fnw3o3yYB8kEN0lK0KiYA6vdDL
"""

!pip install -q opendatasets
import opendatasets as od
# mendownload dataset dari kaggle menggunakan opendatasets
od.download('https://www.kaggle.com/datasets/emmanuelfwerr/london-weather-data')

# import library
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# mengubah dataset menjadi pandas dataframe
df = pd.read_csv('/content/london-weather-data/london_weather.csv')

df.head()

# Output jumlah sampel dataset
print(f'Jumlah sampel dataset {len(df)}')

# Output jumlah data dengan value null
df.isnull().sum()

# isi data yang bernilai null dengan value setelahnya
df.fillna(method='ffill', inplace=True)
df.isnull().sum()

# normalisasi data
scaler = MinMaxScaler()
X_data = scaler.fit_transform(df.iloc[:, 1:].values)
X_data

# fitur yang akan digunakan
df.columns[3]

# extract x dan y yang akan digunakan dari df
dates = df['date'].values
radiation  = X_data[:, 3]

# Plot global radiation (tanpa normalisasi)
plt.figure(figsize=(15,5))
plt.plot(dates, df['global_radiation'])
plt.title('Global Radiation',
          fontsize=20);

# Plot global radiation (dengan normalisasi)
plt.figure(figsize=(15,5))
plt.plot(dates, radiation)
plt.title('Global Radiation Standarized',
          fontsize=20);

# Membagi dataset
X_train, X_test, y_train, y_test = train_test_split(radiation, dates,
                                               test_size=0.2,
                                               shuffle=False)
print(len(X_train), len(X_test))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(X_train, window_size=64, batch_size=100, shuffle_buffer=1000)
test_set = windowed_dataset(X_test, window_size=64, batch_size=100, shuffle_buffer=1000)

# Model
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64),
  tf.keras.layers.Dense(128, activation="relu"),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(64, activation="relu"),
  tf.keras.layers.Dense(32, activation="relu"),
  tf.keras.layers.Dense(1),
])

# menentukan threshold mae (6.5% dari skala data/di bawah 10%)
threshold_mae = (radiation.max() - radiation.min()) * 6.5/100
threshold_mae

# membuat custom callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < threshold_mae and logs.get('val_mae') < threshold_mae): # stop ketika mae dan val_mae di bawah threshold
      print("MAE di bawah threshold!")
      self.model.stop_training = True
callbacks = myCallback()

# compile model
optimizer = tf.keras.optimizers.Nadam(learning_rate=1.0000e-04) # menggunakan optimizer nadam dengan leaerning rate 0.0001
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

# melatih dan menguji model
history = model.fit(train_set,
                    epochs=80,
                    callbacks=[callbacks],
                    validation_data=test_set,
                    verbose=2
                    )

# Plot accuracy/MAE model
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model Mean Average Error')
plt.xlabel('Epochs')
plt.ylabel('MAE')
plt.legend(['Train', 'Test'])
plt.show()

# Plot loss model
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(['Train', 'Test'])
plt.show()