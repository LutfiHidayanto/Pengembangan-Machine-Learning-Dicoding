# -*- coding: utf-8 -*-
"""Project_1_NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BqDTdutJsQ2sMjp40M1_fGJLqfogtt6P
"""

# import library
from sklearn.model_selection import train_test_split
from google.colab import drive
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

!pip install nltk
from nltk.tokenize import word_tokenize, punkt, RegexpTokenizer
from nltk.corpus import stopwords
from nltk.corpus.reader import wordnet
from nltk.stem import WordNetLemmatizer
import re

# mount/load google drive
drive.mount('/content/drive')

# mengubah dataset menjadi panda dataframe
df = pd.read_csv('/content/drive/MyDrive/Datasets/bbc-text.csv')
df.head()

# jumlah sampel data
len(df)

# one hot encoding
category = pd.get_dummies(df['category'])
# menggabungkan hasil one hot encoding dan menghapus kolom label awal
df = pd.concat([df, category], axis=1)
df = df.drop(columns='category')

df.head()

def stop_words_removal(text):
    tokenizer = RegexpTokenizer(r'\w+')
    tokens = tokenizer.tokenize(text)
    stop_words = set(stopwords.words('english'))
    removed_stop_words = [word.lower() for word in tokens if word.lower() not in stop_words]
    return ' '.join(removed_stop_words)

# menghapus stop words dari df
df['filtered_text'] = df['text'].apply(stop_words_removal)

def lemmatization(text):
    tokens = word_tokenize(text)
    lemmatizer = WordNetLemmatizer()
    lemmatized_words = [lemmatizer.lemmatize(word) for word in tokens]
    return ' '.join(lemmatized_words)
# melakukan teknik lemma ke df
df['filtered_text'] = df['filtered_text'].apply(lemmatization)

def remove_number(text):
    text_without_numbers = re.sub(r'\d+', '', text)
    return text_without_numbers
# menghapus angka-angka dari df
df['filtered_text'] = df['filtered_text'].apply(remove_number)

df = df.drop(columns='text')
df.head()

X = df['filtered_text'].values
y = df[['business', 'entertainment', 'politics', 'sport', 'tech']].values

# membagi dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)
X_train[0]

# Menggunakan tokenizer
tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=5000, oov_token='x')

tokenizer.fit_on_texts(X_train) # menggunakan fit_on_texts() hanya pada data train
train_sequences = tokenizer.texts_to_sequences(X_train)
test_sequences = tokenizer.texts_to_sequences(X_test)
# padding sequences
train_padded = tf.keras.preprocessing.sequence.pad_sequences(train_sequences)
test_padded = tf.keras.preprocessing.sequence.pad_sequences(test_sequences)

# Model nlp
model = tf.keras.Sequential ([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=64),
    tf.keras.layers.LSTM(128),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.35),
    tf.keras.layers.Dense(5, activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9 and logs.get('val_accuracy') > 0.9):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

# melakukan training dan uji model
history = model.fit(train_padded, y_train,
                    epochs=50, validation_data=(test_padded, y_test),
                    callbacks=[callbacks], verbose=2, validation_steps=30)

# Plot accuracy model
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Test'])
plt.show()

# Plot loss model
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(['Train', 'Test'])
plt.show()